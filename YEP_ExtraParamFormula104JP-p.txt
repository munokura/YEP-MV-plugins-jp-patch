/*:ja
 * @plugindesc v1.04 追加能力値(HIT,EVA,CRI,CEV,MEV,MRF,CNT,HRG,MRG,TRG)を制御します。
 * @author Yanfly Engine Plugins
 *
 * @param HIT Formula
 * @text 命中率式
 * @desc HIT を決定する式:命中率
 * @default (base + plus) * rate + flat
 *
 * @param EVA Formula
 * @text 回避率式
 * @desc EVA を決定する式:回避率
 * @default (base + plus) * rate + flat
 *
 * @param CRI Formula
 * @text 会心率式
 * @desc CRI を決定する式:会心率
 * @default (base + plus) * rate + flat
 *
 * @param CEV Formula
 * @text 会心回避率式
 * @desc CEV を決定する式:会心回避率
 * @default (base + plus) * rate + flat
 *
 * @param MEV Formula
 * @text 魔法回避率式
 * @desc MEV を決定する式:魔法回避率
 * @default (base + plus) * rate + flat
 *
 * @param MRF Formula
 * @text 魔法反射率式
 * @desc MRF を決定する式:魔法反射率
 * @default (base + plus) * rate + flat
 *
 * @param CNT Formula
 * @text 反撃率式
 * @desc CNT を決定する式:反撃率
 * @default (base + plus) * rate + flat
 *
 * @param HRG Formula
 * @text HP再生率式
 * @desc HRG を決定する式:HP再生率
 * @default (base + plus) * rate + flat
 *
 * @param MRG Formula
 * @text MP再生率式
 * @desc MRG を決定する式:MP再生率
 * @default (base + plus) * rate + flat
 *
 * @param TRG Formula
 * @text TP再生率式
 * @desc TRG を決定する式:TP再生率
 * @default (base + plus) * rate + flat
 *
 * @help
 * 翻訳:ムノクラ
 * https://fungamemake.com/
 * https://twitter.com/munokura/
 *
 * ===========================================================================
 * 導入
 * ===========================================================================
 *
 * RPGツクールMVの追加能力値
 * (HIT、EVA、CRI、CEV、MEV、MRF、CNT、HRG、MRG、TRG)は、
 * データベースによる特性の変更が可能です。
 * 柔軟性はありますが、RPGツクールMVでは、ATKやAGIが命中率に影響を与えたり、
 * LUKがクリティカルヒットに影響を与えたりするようなカスタム式を
 * 使用することはできません。
 * このプラグインを使うと、もう少しコントロールすることができます。
 *
 * ===========================================================================
 * 説明 - 追加能力値の説明
 * ===========================================================================
 *
 * 追加能力値が何をするのかに慣れていない人のために、
 * RPGツクールMVプロジェクトにおける標準機能を説明するリストです。
 *
 * ---
 *
 * HIT - 命中率
 * - あらゆる物理的な行動の物理的な命中率を決定します。
 * 全ての物理的な攻撃は、
 * 攻撃が有効かどうかを確認するために命中率を判定します。
 * 命中率が乱数判定で成功すると、攻撃は有効とされます。
 * 命中率が乱数判定で失敗すると、攻撃はミスと見なされます。
 *
 * ---
 *
 * EVA - 回避率
 * - あらゆる物理的行動に対する物理的回避率を決定します。
 * 命中率が成功すると、
 * 行動は乱数判定を介して回避率判定に渡されます。
 * 乱数判定で成功すると、物理的な攻撃は回避されます。
 * 乱数判定で失敗すると、行動を回避する試みは失敗し、行動は有効とされます。
 *
 * ---
 *
 * CRI - 会心率
 * - クリティカルヒットを有効にする全ての行動は
 * この数で乱数判定を行います。
 * 乱数判定で成功すると、加算のダメージは開始された行動によって実行されます。
 * 乱数判定で失敗すると、行動に加算のダメージは加算されません。
 *
 * ---
 *
 * CEV - 会心回避率
 * - 乗法的な割合で、クリティカルレベルに対するものです。
 * 会心率が90%で会心回避率が20%の時、
 * 値はソースコードによって CRI * (1 - CEV) として計算されるため、
 * 乱数判定は72%に対して判定を行います。
 * 0.90 * (1 - 0.20) === 0.72
 *
 * ---
 *
 * MEV - 魔法回避率
 * - EVAが身体的行動に対する回避率である時、
 * MEVは魔法的行動に対する回避率です。
 * HITには魔法のようなバージョンがないため、
 * 魔法効果が開始されるとMEV値は常に反対になります。
 * 乱数判定でMEVに成功すると、魔法効果は回避されます。
 * 乱数判定でMEVに失敗すると、魔法効果が発動します。
 *
 * ---
 *
 * MRF - 魔法反射率
 * - 魔法効果が有効化すると、
 * 魔法効果が術者に跳ね返る可能性があります。
 * 魔法反射率の乱数判定で成功すると、
 * 術者の魔法回避率を無視して、魔法効果は術者に戻されます。
 * 魔法反射率の乱数判定で失敗すると、魔法効果は対象に有効とします。
 *
 * ---
 *
 * CNT - 反撃率
 * - 物理的な行動が有効化すると、
 * 物理的な行動を回避することができ、
 * 使用者によって行われた反撃が
 * 攻撃しているユニットに当たる可能性があります。
 * 反撃率の乱数判定で成功すると、
 * 物理的な行動は回避され、対象は使用者を反撃します。
 * 乱数判定で失敗すると、物理的な行動は対象に有効とします。
 *
 * ---
 *
 * HRG - HP再生率
 * - バトラーの再生成フェイズの間、100%の成功率でHPを獲得した時、
 * 最大HPのこの割合を再生成します。
 *
 * ---
 *
 * MRG - MP再生率
 * - バトラーの再生成フェイズの間、100%の成功率でMPを得た時、
 * 最大MPのこの割合を再生成します。
 *
 * ---
 *
 * TRG - TP再生率
 * - バトラーの再生成フェイズの間、100%の成功率でTPを得て、
 * 最大TPのこの割合を再生成します。
 *
 * ---
 *
 * ===========================================================================
 * 説明 - カスタム式
 * ===========================================================================
 *
 * プラグインパラメータの式によって計算された値は、float値として出力されます。
 * CRIの結果値が0.1となる時、10%CRIになります。
 * これが一例です。
 *
 *   (base + plus) * rate + flat + user.luk / 1000
 *
 * 'user.luk / 1000'が最後に挿入されています。
 * 他の全てが10%で使用者のLUK能力値が500であると仮定すると、
 * それは0.1+0.5になります。
 * これは合計が0.6になることを意味し、したがって60%の会心率です。
 *
 * ===========================================================================
 * 説明 - 変数について
 * ===========================================================================
 *
 * 'base'、'plus'、'rate'、'flat'はどういう意味?
 * このセクションはそれを詳細に答えます。
 *
 * デフォルトのプラグイン式: (base + plus) * rate + flat
 *
 * BASE
 * - RPGツクールMVが能力値を決定するデフォルトの方法、
 * RPGツクールMVが能力値の合計特性値の合計によって決定されます。
 * バトラーが+95%、-10%、+5%のHIT特性を混在させる時、
 * 追加能力値量は+90%になります。
 *
 * PLUS
 * - プラグインによって加算された新しい変数です。
 * 目的は、BASE値への加算として機能することです。
 * この加算は、user.addXParamを実行してPLUS値のBASE値を変更できるため、
 * データベース項目とは無関係に実行できます。
 * デフォルトの式を使用する時、この値は、
 * RATEがそれに乗算されてFLAT値が合計に加算される前にBASE値に加算されます。
 *
 * RATE
 * - プラグインによって加算された新しい変数です。
 * 目的は、PLUS値の乗数修飾子として機能することです。
 * メモタグを通して様々なデータベースオブジェクトによって決定されます。
 * デフォルトの式を使用する時、FLAT値が合計に加算される前に、
 * 追加能力値とPLUS値の合計に乗算されます。
 *
 * FLAT
 * - プラグインによって加算された新しい変数です。
 * 目的は、PLUS値に対する加算の修飾子として機能することです。
 * メモタグを通して様々なデータベースオブジェクトによって決定されます。
 * プラグインのデフォルトの式を使用する時、
 * statのBASE値とPLUS値の合計にRATEを掛けた後に加算されます。
 *
 * ===========================================================================
 * 例 - 式のサンプル
 * ===========================================================================
 *
 * PLUS値をもう少し動的にするために使用できるサンプルの数式です。
 *
 * --- HIT ---
 * (base + plus) * rate + flat + ((user.atk + user.agi) / 2000)
 * - HIT率がATKとAGIからボーナスを得ます。
 *
 * --- EVA ---
 * (base + plus) * rate + flat + ((user.def + user.agi) / 2000)
 * - EVA率はDEFとAGIからボーナスを得ます。
 *
 * --- CRI ---
 * (base + plus) * rate + flat + (user.luk / 1000)
 * - CRI率がLUKからボーナスを得ます。
 *
 * --- CEV ---
 * (base + plus) * rate + flat + ((user.agi + user.luk) / 2000)
 * - CEV率がLUKとAGIからボーナスを得ます。
 *
 * --- MEV ---
 * (base + plus) * rate + flat + ((user.mdf + user.agi) / 2000)
 * - MEV率がMDFとAGIからボーナスを得ます。
 *
 * 上記は、PLUS値を使用者の他の能力値の影響を受けるようにする例です。
 *
 * ===========================================================================
 * メモタグ
 * ===========================================================================
 *
 * PLUS値を変更するために、次のメモタグを使用できます。
 *
 * アクター、職業、敵、武器、防具、ステートのメモタグ
 *
 *   <stat Plus: +x%>
 *   <stat Plus: -x%>
 *   <stat Plus: +x.y>
 *   <stat Plus: -x.y>
 *   'stat'を'hit'、'eva'、'cri'、'cev'、'mev'、'mrf'、'cnt'、'hrg'、'mrg'、
 *   'trg'に置き換えます。
 *   プラグインのデフォルトの式が使用されていると仮定して、
 *   rateとflatの値が能力値の合計値になる前に
 *   BASE値に加算される値です。
 *
 *   <stat Rate: x%>
 *   <stat Rate: x.y>
 *   'stat'を'hit'、'eva'、'cri'、'cev'、'mev'、'mrf'、'cnt'、'hrg'、'mrg'、
 *   'trg'に置き換えます。
 *   プラグインのデフォルトの式が使用されていると仮定して、
 *   BASE値とPLUS値の合計にFLAT値を加算する前に乗算される値です。
 *
 *   <stat Flat: +x%>
 *   <stat Flat: -x%>
 *   <stat Flat: +x.y>
 *   <stat Flat: -x.y>
 *   'stat'を'hit'、'eva'、'cri'、'cev'、'mev'、'mrf'、'cnt'、'hrg'、'mrg'、
 *   'trg'に置き換えます。
 *   プラグインのデフォルトの式が使用されていると仮定して、
 *   BASE値とPLUS値の合計に最後に加算される値です。
 *
 * ===========================================================================
 * ルナティックモード - 新しいJavaScript関数
 * ===========================================================================
 *
 * 次のJavaScript機能を使用して、アクターのPLUS値を変更できます。
 * 'actor'変数はアクターによって参照されます。
 *
 * actor = $gameActors.actor(3));
 *
 * 関数
 *
 *   actor.clearXParamPlus()
 *   - アクターのPLUS値のボーナスをすべてクリアします。
 *
 *   actor.setHit(x)
 *   actor.setEva(x)
 *   actor.setCri(x)
 *   actor.setCev(x)
 *   actor.setMev(x)
 *   actor.setMrf(x)
 *   actor.setCnt(x)
 *   actor.setHrg(x)
 *   actor.setMrg(x)
 *   actor.setTrg(x)
 *   - アクターのPLUS値をxに設定します。
 *   1は100%、0.1は10%になります。負の値を使用できます。
 *
 *   actor.setHitPlus(x)
 *   actor.setEvaPlus(x)
 *   actor.setCriPlus(x)
 *   actor.setCevPlus(x)
 *   actor.setMevPlus(x)
 *   actor.setMrfPlus(x)
 *   actor.setCntPlus(x)
 *   actor.setHrgPlus(x)
 *   actor.setMrgPlus(x)
 *   actor.setTrgPlus(x)
 *   - アクターのPLUS値を値にxを設定します。
 *   1は100%、0.1は10%になります。負の値を使用できます。
 *
 *   actor.addHit(x)
 *   actor.addEva(x)
 *   actor.addCri(x)
 *   actor.addCev(x)
 *   actor.addMev(x)
 *   actor.addMrf(x)
 *   actor.addCnt(x)
 *   actor.addHrg(x)
 *   actor.addMrg(x)
 *   actor.addTrg(x)
 *   - アクターのPLUS値にxを加算します。
 *   1は100%、0.1は10%になります。負の値は能力値を減らします。
 *
 *   actor.minusHit(x)
 *   actor.minusEva(x)
 *   actor.minusCri(x)
 *   actor.minusCev(x)
 *   actor.minusMev(x)
 *   actor.minusMrf(x)
 *   actor.minusCnt(x)
 *   actor.minusHrg(x)
 *   actor.minusMrg(x)
 *   actor.minusTrg(x)
 *   - アクターのPLUS値からxを減算します。
 *   1は100%、0.1は10%になります。負の値は能力値に加算されます。
 *
 * ===========================================================================
 * Changelog
 * ===========================================================================
 *
 * Version 1.04:
 * - Updated for RPG Maker MV version 1.5.0.
 *
 * Version 1.03a:
 * - Lunatic Mode fail safe added.
 * - Documentation update to fix typos.
 *
 * Version 1.02:
 * - Fixed an issue with the battler.setXParam functions that made them take
 * the wrong value due caching issues.
 *
 * Version 1.01:
 * - Updated for RPG Maker MV version 1.1.0.
 *
 * Version 1.00:
 * - Finished Plugin!
 */
